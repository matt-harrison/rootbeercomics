{"version":3,"sources":["../../puzzle/src/App.js","../../puzzle/src/index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","debounceFormatPuzzle","format","formatPuzzle","state","setState","objectSpread","isResizing","setTimeout","windowWidth","window","innerWidth","windowHeight","innerHeight","backgroundRatio","backgroundWidth","backgroundHeight","puzzleWidth","puzzleHeight","puzzleScale","squareWidth","columns","squareHeight","rows","handleClick","index","clicked","squares","clickedColumn","column","clickedRow","row","empty","length","emptyColumn","emptyRow","slice","forEach","square","shuffleSquares","positions","i","slot","Math","floor","random","position","splice","initialState","img","debounceTimer","assign","id","originalPosition","style","opacity","zIndex","push","addEventListener","clearTimeout","_this2","react_default","a","createElement","className","width","height","backgroundImage","concat","backgroundSize","map","x","y","top","left","backgroundPosition","key","onClick","e","preventDefault","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.4223d3fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    let squares   = [];\n    let positions = [];\n    let initialState = {\n      backgroundHeight: 1519,\n      backgroundWidth: 1000,\n      columns: 4,\n      isResizing: false,\n      img: 'http://rootbeercomics.com/illustration/posters/img/flickit-fridays.jpg',\n      puzzleHeight: null,\n      puzzleWidth: null,\n      rows: 6,\n      squareWidth: null,\n      squareHeight: null,\n      squares,\n      debounceTimer: {}\n    };\n\n    initialState = Object.assign(initialState, this.formatPuzzle(initialState));\n\n    for (let row = 0; row < initialState.rows; row++) {\n      for (let column = 0; column < initialState.columns; column++) {\n        const id = row * initialState.columns + column;\n        const position = {\n          column,\n          row\n        };\n        const square = {\n          originalPosition: {\n            column,\n            row\n          },\n          style: {\n            opacity: (id === (initialState.columns * initialState.rows) - 1) ? '0'  : '1',\n            zIndex:  (id === (initialState.columns * initialState.rows) - 1) ? '-1' : id\n          }\n        };\n\n        squares.push(square);\n        positions.push(position);\n      }\n    }\n\n    squares = this.shuffleSquares(squares, positions);\n\n    this.state = initialState;\n\n    window.addEventListener('resize', () => {\n      let debounceTimer = this.state.debounceTimer;\n\n      clearTimeout(debounceTimer);\n\n      debounceTimer = setTimeout(this.debounceFormatPuzzle, 250);\n\n      this.setState({debounceTimer});\n    });\n  }\n\n  debounceFormatPuzzle = () => {\n    const format = this.formatPuzzle(this.state);\n\n    this.setState({\n      isResizing: true,\n      ...format\n    }, () => {\n      setTimeout(() => {\n        this.setState({isResizing: false}, () => {\n        });\n      }, 100);\n    });\n  };\n\n  formatPuzzle = (state) => {\n    const windowWidth     = window.innerWidth - 20;\n    const windowHeight    = window.innerHeight - 20;\n    const backgroundRatio = state.backgroundWidth / state.backgroundHeight;\n    const isFullWidth     = windowWidth / backgroundRatio <= windowHeight;\n    const puzzleWidth     = (isFullWidth) ? windowWidth : windowHeight * backgroundRatio;\n    const puzzleHeight    = puzzleWidth / backgroundRatio;\n    const puzzleScale     = puzzleWidth / state.backgroundWidth;\n    const squareWidth     = puzzleWidth / state.columns;\n    const squareHeight    = puzzleHeight / state.rows;\n\n    return {\n      puzzleHeight,\n      puzzleScale,\n      puzzleWidth,\n      squareHeight,\n      squareWidth\n    };\n  };\n\n  handleClick = (index) => {\n    let   clicked       = this.state.squares[index];\n    const clickedColumn = clicked.column;\n    const clickedRow    = clicked.row;\n    let   empty         = this.state.squares[this.state.squares.length - 1];\n    const emptyColumn   = empty.column;\n    const emptyRow      = empty.row;\n    let   squares       = this.state.squares.slice();\n\n    if ((clickedColumn === emptyColumn && clickedRow !== emptyRow) || (clickedRow === emptyRow && clickedColumn !== emptyColumn)) {\n      squares.forEach((square) => {\n        if (!(square.column === emptyColumn && square.row === emptyRow)) {\n          if (emptyColumn === clickedColumn && square.column === clickedColumn) {\n            if (emptyRow > clickedRow && square.row >= clickedRow && square.row < emptyRow) {\n              square.row++;\n            } else if (emptyRow < clickedRow && square.row <= clickedRow && square.row > emptyRow) {\n              square.row--;\n            }\n          } else if (emptyRow === clickedRow && square.row === clickedRow) {\n            if (emptyColumn > clickedColumn && square.column >= clickedColumn && square.column < emptyColumn) {\n              square.column++;\n            } else if (emptyColumn < clickedColumn && square.column <= clickedColumn && square.column > emptyColumn) {\n              square.column--;\n            }\n          }\n        } else {\n          square.column = clickedColumn;\n          square.row    = clickedRow;\n        }\n      });\n\n      this.setState({squares});\n    }\n  };\n\n  shuffleSquares = (squares, positions) => {\n    for (let i = 0; i < squares.length; i++) {\n      const slot     = Math.floor(Math.random() * positions.length);\n      const position = positions.splice(slot, 1);\n\n      squares[i].column = position[0].column;\n      squares[i].row    = position[0].row;\n    }\n\n    return squares;\n  }\n\n  render() {\n    return (\n      <div\n      className=\"puzzle\"\n      style={{\n        width:  this.state.puzzleWidth,\n        height: this.state.puzzleHeight,\n      }}\n      >\n        <div\n        className=\"background\"\n        style={{\n          backgroundImage: `url(${this.state.img})`,\n          backgroundSize:  `${this.state.puzzleWidth}px ${this.state.puzzleHeight}px`\n        }}\n        />\n        {this.state.squares.map((square, index) => {\n          const x     = square.originalPosition.column * this.state.squareWidth;\n          const y     = square.originalPosition.row * this.state.squareHeight;\n          const style = {\n            top: square.row * this.state.squareHeight,\n            left: square.column * this.state.squareWidth,\n            width: this.state.squareWidth,\n            height: this.state.squareHeight,\n            backgroundPosition: `${(0 - x)}px ${(0 - y)}px`,\n            backgroundImage: `url(${this.state.img})`,\n            backgroundSize: `${this.state.puzzleWidth}px ${this.state.puzzleHeight}px`,\n            opacity: square.style.opacity,\n            zIndex:  square.style.zIndex\n          };\n\n          return (\n            <div\n            className={this.state.isResizing ? 'square hotdog' : 'square trans'}\n            key={index}\n            style={style}\n            onClick={(e) => {\n              e.preventDefault();\n              this.handleClick(index);\n            }}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}